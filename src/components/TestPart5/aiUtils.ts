// H√†m g·ªçi OpenAI API cho Part 5 (Incomplete Sentences)
export async function analyzeWithAI(logText: string): Promise<any> {
  const apiKey = process.env.REACT_APP_API_KEY_OPENAI;
  const endpoint = "https://api.openai.com/v1/chat/completions";

  const messages = [
    {
      role: "system",
      content: "B·∫°n l√† m·ªôt gi√°o vi√™n TOEIC Part 5 th√¥ng minh c·ªßa ETS, chuy√™n ph√¢n t√≠ch l·ªói h·ªçc vi√™n v√† ƒë∆∞a ra b√†i luy·ªán t·∫≠p ch√≠nh x√°c theo t·ª´ng l·ªói."
    },
    {
      role: "user",
      content: `ƒê√¢y l√† c√¢u m√† h·ªçc vi√™n ${logText}

                        == Y√äU C·∫¶U X·ª¨ L√ù ==
                        B·∫°n th·ª±c hi·ªán 2 vi·ªác:

                        1. Ph√¢n t√≠ch l·ªói h·ªçc vi√™n, tr·∫£ v·ªÅ c√°c m·ª•c sau b·∫±ng ti·∫øng vi·ªát:
                        - mainError: l·ªói ch√≠nh ng∆∞·ªùi h·ªçc m·∫Øc ph·∫£i (ng·∫Øn g·ªçn)
                        - reasons: m·∫£ng g·ªìm 2‚Äì3 nguy√™n nh√¢n c·ª• th·ªÉ
                        - solutions: m·∫£ng g·ªìm 2‚Äì3 gi·∫£i ph√°p r√µ r√†ng, ƒë∆°n gi·∫£n ƒë·ªÉ c·∫£i thi·ªán

                        2. Sinh m·ªôt c√¢u luy·ªán t·∫≠p m·ªõi t∆∞∆°ng t·ª± (gi·ªëng c·∫•u tr√∫c ƒë·ªÅ TOEIC Part 5) v·ªõi level t∆∞∆°ng t·ª±, g·ªìm:
                        - sentence: c√¢u ch∆∞a ho√†n ch·ªânh v·ªõi ch·ªó tr·ªëng
                        - choices: A/B/C/D l√† c√°c ƒë√°p √°n
                        - choicesVi: b·∫£n d·ªãch ti·∫øng Vi·ªát cho m·ªói ƒë√°p √°n
                        - correctAnswer: "A" / "B" / "C" / "D"
                        - explanation: gi·∫£i th√≠ch v√¨ sao ƒë√°p √°n ƒë√∫ng
                        - traps: m√¥ t·∫£ c√°c b·∫´y ƒë∆∞·ª£c g√†i
                        - type: lo·∫°i c√¢u h·ªèi (grammar, vocabulary, etc.)

                        == Y√äU C·∫¶U ƒê·∫¶U RA ==
                        Tr·∫£ v·ªÅ duy nh·∫•t 1 object JSON v·ªõi schema sau:

                        {
                        "questionNumber": 1,
                        "analysis": {
                            "correctAnswer": "...",
                            "chosenAnswer": "...",
                            "mainError": "...",
                            "reasons": ["...", "..."],
                            "solutions": ["...", "..."]
                        },
                        "practiceQuestion": {
                            "sentence": "...",
                            "choices": {
                            "A": "...",
                            "B": "...",
                            "C": "...",
                            "D": "..."
                            },
                            "choicesVi": {
                            "A": "...",
                            "B": "...",
                            "C": "...",
                            "D": "..."
                            },
                            "correctAnswer": "A" | "B" | "C" | "D",
                            "explanation": "...",
                            "traps": "...",
                            "type": "..."
                        }
                        }

                        == DANH M·ª§C B·∫™Y ==
                        trapId            | T√™n               | M√¥ t·∫£  
                        ------------------|-------------------|--------------------------------------  
                        grammarError      | Grammar Error     | L·ªói ng·ªØ ph√°p c∆° b·∫£n  
                        vocabularyError   | Vocabulary Error  | Sai t·ª´ v·ª±ng  
                        collocationError  | Collocation Error | Sai c·ª•m t·ª´  
                        tenseError        | Tense Error       | Sai th√¨  
                        prepositionError  | Preposition Error | Sai gi·ªõi t·ª´  
                        articleError      | Article Error     | Sai m·∫°o t·ª´  
                        similarWord       | Similar Word      | T·ª´ t∆∞∆°ng t·ª± nh∆∞ng sai nghƒ©a  

                        == QUY T·∫ÆC B·∫ÆT BU·ªòC ==
                        - ƒê√°p √°n ƒë√∫ng ph·∫£i ƒë√∫ng ng·ªØ ph√°p v√† ng·ªØ nghƒ©a
                        - ƒê√°p √°n sai l√† ƒë√°p √°n c√≥ c√°c l·ªói sai nh∆∞:
                        + Sai ng·ªØ ph√°p
                        + Sai t·ª´ v·ª±ng
                        + Sai c·ª•m t·ª´
                        + Sai th√¨
                        - C√¢u ch∆∞a ho√†n ch·ªânh ph·∫£i r√µ r√†ng, kh√¥ng m∆° h·ªì
                        - üëâ CH·ªà TR·∫¢ V·ªÄ JSON, KH√îNG GI·∫¢I TH√çCH, KH√îNG MARKDOWN.
                        `
    }
  ];

  const response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages,
      temperature: 1.0,
      max_tokens: 2048,
      top_p: 1.0
    })
  });

  if (!response.ok) {
    if (response.status === 401) {
      throw new Error("OpenAI API key is invalid or expired. Please check your REACT_APP_OPENAI_API_KEY environment variable.");
    }
    throw new Error("OpenAI API error: " + response.statusText);
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

// H√†m sinh 1 c√¢u luy·ªán t·∫≠p TOEIC Part 5 theo y√™u c·∫ßu ng∆∞·ªùi d√πng
export async function generateToeicPracticeQuestionPart5(userRequest: string): Promise<any> {
  const apiKey = process.env.REACT_APP_API_KEY_OPENAI;
  const endpoint = "https://api.openai.com/v1/chat/completions";
  
  const messages = [
    {
      role: "system",
      content: `B·∫°n l√† ng∆∞·ªùi ra ƒë·ªÅ TOEIC c·ªßa ETS, chuy√™n t·∫°o b√†i luy·ªán t·∫≠p TOEIC Part 5 (Incomplete Sentences) theo y√™u c·∫ßu. 

== C·∫§U TR√öC TOEIC PART 5 ==
- 30 c√¢u h·ªèi tr·∫Øc nghi·ªám
- M·ªói c√¢u c√≥ 1 ch·ªó tr·ªëng trong c√¢u
- 4 l·ª±a ch·ªçn A, B, C, D
- T·∫≠p trung v√†o: ng·ªØ ph√°p, t·ª´ v·ª±ng, c·ª•m t·ª´, th√¨, gi·ªõi t·ª´, m·∫°o t·ª´

== H∆Ø·ªöNG D·∫™N PH√ÇN T√çCH LEVEL ==
T·ª± ƒë·ªông nh·∫≠n di·ªán m·ª©c ƒë·ªô kh√≥ t·ª´ y√™u c·∫ßu ng∆∞·ªùi d√πng:
- Level 1/Beginner: T·ª´ kh√≥a "d·ªÖ", "c∆° b·∫£n", "ƒë∆°n gi·∫£n", "level 1", "beginner"
- Level 2/Intermediate: T·ª´ kh√≥a "trung b√¨nh", "v·ª´a ph·∫£i", "level 2", "intermediate" ho·∫∑c kh√¥ng c√≥ t·ª´ kh√≥a level
- Level 3/Advanced: T·ª´ kh√≥a "kh√≥", "n√¢ng cao", "ph·ª©c t·∫°p", "level 3", "advanced"

== Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG ==
${userRequest}

== ƒê·∫¶U RA PH·∫¢I L√Ä OBJECT JSON DUY NH·∫§T, KH√îNG GI·∫¢I TH√çCH, KH√îNG MARKDOWN ==

Schema:
{
  "practiceQuestion": {
    "questionNumber": 1,
    "level": "beginner|intermediate|advanced",
    "sentence": "...", // C√¢u ch∆∞a ho√†n ch·ªânh v·ªõi ch·ªó tr·ªëng (_____)
    "choices": { "A": "...", "B": "...", "C": "...", "D": "..." },
    "choicesVi": { "A": "...", "B": "...", "C": "...", "D": "..." },
    "correctAnswer": "A" | "B" | "C" | "D",
    "explanation": "...", // Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát
    "traps": "...", // M√¥ t·∫£ b·∫´y b·∫±ng ti·∫øng Vi·ªát
    "type": "grammar|vocabulary|collocation|tense|preposition|article|conjunction|pronoun|adjective|adverb"
  }
}

== QUY T·∫ÆC T·∫†O C√ÇU H·ªéI THEO LEVEL ==
- Beginner: Ng·ªØ ph√°p c∆° b·∫£n, t·ª´ v·ª±ng ƒë∆°n gi·∫£n, b·∫´y d·ªÖ nh·∫≠n bi·∫øt
- Intermediate: Ng·ªØ ph√°p v·ª´a ph·∫£i, t·ª´ v·ª±ng ph·ªï th√¥ng, b·∫´y th√¥ng minh  
- Advanced: Ng·ªØ ph√°p ph·ª©c t·∫°p, t·ª´ v·ª±ng n√¢ng cao, b·∫´y tinh vi
- C√¢u ch∆∞a ho√†n ch·ªânh ph·∫£i l√† ti·∫øng Anh, kh√¥ng d√πng ti·∫øng Vi·ªát
- Ch·ªó tr·ªëng ƒë∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng "_____"
- Kh√¥ng ƒë∆∞·ª£c ra nh·ªØng c√¢u ƒë√£ ra tr∆∞·ªõc ƒë√≥

== LO·∫†I C√ÇU H·ªéI PART 5 ==
- Grammar: Ng·ªØ ph√°p (th√¨, c·∫•u tr√∫c c√¢u, v.v.)
- Vocabulary: T·ª´ v·ª±ng (nghƒ©a t·ª´, t·ª´ ƒë·ªìng nghƒ©a, v.v.)
- Collocation: C·ª•m t·ª´ (t·ª´ ƒëi k√®m)
- Tense: Th√¨ c·ªßa ƒë·ªông t·ª´
- Preposition: Gi·ªõi t·ª´
- Article: M·∫°o t·ª´ (a, an, the)
- Conjunction: Li√™n t·ª´
- Pronoun: ƒê·∫°i t·ª´
- Adjective/Adverb: T√≠nh t·ª´/Tr·∫°ng t·ª´`
    }
  ];

  const response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages,
      temperature: 1.0,
      max_tokens: 1024,
      top_p: 1.0
    })
  });

  if (!response.ok) throw new Error("OpenAI API error: " + response.statusText);
  const data = await response.json();
  
  // Tr·∫£ v·ªÅ object JSON duy nh·∫•t
  try {
    return JSON.parse(data.choices[0].message.content);
  } catch (e) {
    throw new Error("L·ªói parse JSON t·ª´ AI: " + data.choices[0].message.content);
  }
} 