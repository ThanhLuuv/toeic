// H√†m g·ªçi OpenAI API cho Part 4 (Short Talks)
export async function analyzeWithAI(logText: string): Promise<any> {
  const apiKey = process.env.REACT_APP_API_KEY_OPENAI;
  const endpoint = "https://api.openai.com/v1/chat/completions";

  const messages = [
    {
      role: "system",
      content: "B·∫°n l√† m·ªôt gi√°o vi√™n TOEIC Part 4 th√¥ng minh c·ªßa ETS, chuy√™n ph√¢n t√≠ch l·ªói h·ªçc vi√™n v√† ƒë∆∞a ra b√†i luy·ªán t·∫≠p ch√≠nh x√°c theo t·ª´ng l·ªói."
    },
    {
      role: "user",
      content: `ƒê√¢y l√† c√¢u m√† h·ªçc vi√™n ${logText}

                        == Y√äU C·∫¶U X·ª¨ L√ù ==
                        B·∫°n th·ª±c hi·ªán 2 vi·ªác:

                        1. Ph√¢n t√≠ch l·ªói h·ªçc vi√™n, tr·∫£ v·ªÅ c√°c m·ª•c sau b·∫±ng ti·∫øng vi·ªát:
                        - mainError: l·ªói ch√≠nh ng∆∞·ªùi h·ªçc m·∫Øc ph·∫£i (ng·∫Øn g·ªçn)
                        - reasons: m·∫£ng g·ªìm 2‚Äì3 nguy√™n nh√¢n c·ª• th·ªÉ
                        - solutions: m·∫£ng g·ªìm 2‚Äì3 gi·∫£i ph√°p r√µ r√†ng, ƒë∆°n gi·∫£n ƒë·ªÉ c·∫£i thi·ªán

                        2. Sinh m·ªôt c√¢u luy·ªán t·∫≠p m·ªõi t∆∞∆°ng t·ª± (gi·ªëng c·∫•u tr√∫c ƒë·ªÅ TOEIC Part 4) v·ªõi level t∆∞∆°ng t·ª±, g·ªìm:
                        - transcript: n·ªôi dung b√†i n√≥i ng·∫Øn
                        - question: c√¢u h·ªèi v·ªÅ b√†i n√≥i
                        - choices: A/B/C l√† c√°c ƒë√°p √°n
                        - choicesVi: b·∫£n d·ªãch ti·∫øng Vi·ªát cho m·ªói ƒë√°p √°n
                        - correctAnswer: "A" / "B" / "C"
                        - explanation: gi·∫£i th√≠ch v√¨ sao ƒë√°p √°n ƒë√∫ng
                        - traps: m√¥ t·∫£ c√°c b·∫´y ƒë∆∞·ª£c g√†i
                        - type: lo·∫°i c√¢u h·ªèi (main idea, detail, inference, etc.)

                        == Y√äU C·∫¶U ƒê·∫¶U RA ==
                        Tr·∫£ v·ªÅ duy nh·∫•t 1 object JSON v·ªõi schema sau:

                        {
                        "questionNumber": 1,
                        "analysis": {
                            "correctAnswer": "...",
                            "chosenAnswer": "...",
                            "mainError": "...",
                            "reasons": ["...", "..."],
                            "solutions": ["...", "..."]
                        },
                        "practiceQuestion": {
                            "transcript": "...",
                            "question": "...",
                            "choices": {
                            "A": "...",
                            "B": "...",
                            "C": "..."
                            },
                            "choicesVi": {
                            "A": "...",
                            "B": "...",
                            "C": "..."
                            },
                            "correctAnswer": "A" | "B" | "C",
                            "explanation": "...",
                            "traps": "...",
                            "type": "..."
                        }
                        }

                        == DANH M·ª§C B·∫™Y ==
                        trapId            | T√™n               | M√¥ t·∫£  
                        ------------------|-------------------|--------------------------------------  
                        keywordMisuse     | Keyword Misuse    | T·ª´ ƒë√∫ng nh∆∞ng sai ng·ªØ c·∫£nh  
                        assumption        | Assumption        | Suy lu·∫≠n kh√¥ng c√≥ trong b√†i  
                        similarSound      | Similar Sound     | Nh·∫ßm l·∫´n do √¢m gi·ªëng  
                        homophone         | Homophone         | T·ª´ ƒë·ªìng √¢m kh√°c nghƒ©a  
                        misfocus          | Misfocus          | T·∫≠p trung v√†o chi ti·∫øt ph·ª•  
                        timeConfusion     | Time Confusion    | Nh·∫ßm l·∫´n v·ªÅ th·ªùi gian  
                        numberConfusion   | Number Confusion  | Nh·∫ßm l·∫´n v·ªÅ s·ªë li·ªáu  

                        == QUY T·∫ÆC B·∫ÆT BU·ªòC ==
                        - ƒê√°p √°n ƒë√∫ng ph·∫£i c√≥ trong transcript ho·∫∑c c√≥ th·ªÉ suy lu·∫≠n tr·ª±c ti·∫øp
                        - ƒê√°p √°n sai l√† ƒë√°p √°n c√≥ c√°c l·ªói sai nh∆∞:
                        + Sai v·ªÅ th√¥ng tin c·ª• th·ªÉ
                        + Sai v·ªÅ th·ªùi gian/ƒë·ªãa ƒëi·ªÉm
                        + Sai v·ªÅ s·ªë li·ªáu
                        + Suy lu·∫≠n qu√° xa
                        - Transcript ph·∫£i ng·∫Øn g·ªçn (30-60 gi√¢y)
                        - C√¢u h·ªèi ph·∫£i r√µ r√†ng, kh√¥ng m∆° h·ªì
                        - üëâ CH·ªà TR·∫¢ V·ªÄ JSON, KH√îNG GI·∫¢I TH√çCH, KH√îNG MARKDOWN.
                        `
    }
  ];

  const response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages,
      temperature: 1.0,
      max_tokens: 2048,
      top_p: 1.0
    })
  });

  if (!response.ok) {
    if (response.status === 401) {
      throw new Error("OpenAI API key is invalid or expired. Please check your REACT_APP_OPENAI_API_KEY environment variable.");
    }
    throw new Error("OpenAI API error: " + response.statusText);
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

// H√†m t·∫°o audio base64 t·ª´ Google TTS cho Part 4
export async function generateAudioBase64Part4(practiceQuestion: any): Promise<string> {
  const GOOGLE_TTS_KEY = process.env.REACT_APP_GOOGLE_TTS_KEY || 'AIzaSyAqO6_hgidkr_qandEMZUJlBcAhF3xOsUk';
  
  function fixPronunciation(text: string) {
    let fixedText = text;
    // Fix common pronunciation issues
    fixedText = fixedText.replace(/\ba man\b/gi, '<phoneme alphabet="ipa" ph="…ô m√¶n">a man</phoneme>');
    fixedText = fixedText.replace(/\ba woman\b/gi, '<phoneme alphabet="ipa" ph="…ô Ààw äm…ôn">a woman</phoneme>');
    fixedText = fixedText.replace(/\ba person\b/gi, '<phoneme alphabet="ipa" ph="…ô Ààp…úrs…ôn">a person</phoneme>');
    return fixedText;
  }

  const maleVoice = 'en-US-Wavenet-D';
  const questionNumber = practiceQuestion.questionNumber || 1;
  const transcript = practiceQuestion.transcript || '';
  const question = practiceQuestion.question || '';
  const answerA = practiceQuestion.choices?.A || '';
  const answerB = practiceQuestion.choices?.B || '';
  const answerC = practiceQuestion.choices?.C || '';

  const ssmlContent = `
    <speak>
      <voice name="${maleVoice}">
        <prosody rate="medium" pitch="medium">
          ${fixPronunciation(transcript)}
        </prosody>
        <break time="1.5s"/>
        <prosody rate="slow" pitch="medium">
          ${fixPronunciation(question)}
        </prosody>
        <break time="1.2s"/>
        <prosody rate="medium" pitch="medium">
          A. ${fixPronunciation(answerA)}
        </prosody>
        <break time="0.8s"/>
        <prosody rate="medium" pitch="medium">
          B. ${fixPronunciation(answerB)}
        </prosody>
        <break time="0.8s"/>
        <prosody rate="medium" pitch="medium">
          C. ${fixPronunciation(answerC)}
        </prosody>
      </voice>
    </speak>
  `;

  const response = await fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${GOOGLE_TTS_KEY}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      input: { ssml: ssmlContent },
      voice: { languageCode: 'en-US', name: maleVoice },
      audioConfig: {
        audioEncoding: 'MP3',
        speakingRate: 0.9,
        pitch: 0.0
      }
    })
  });

  const result = await response.json();
  if (result.audioContent) {
    return `data:audio/mp3;base64,${result.audioContent}`;
  }
  throw new Error('Audio generation failed');
}

// H√†m sinh 1 c√¢u luy·ªán t·∫≠p TOEIC Part 4 theo y√™u c·∫ßu ng∆∞·ªùi d√πng
export async function generateToeicPracticeQuestionPart4(userRequest: string): Promise<any> {
  const apiKey = process.env.REACT_APP_API_KEY_OPENAI;
  const endpoint = "https://api.openai.com/v1/chat/completions";
  
  const messages = [
    {
      role: "system",
      content: `B·∫°n l√† s·∫Ω l√† ng∆∞·ªùi ra ƒë·ªÅ Toeic c·ªßa ETS, chuy√™n t·∫°o b√†i luy·ªán t·∫≠p TOEIC Part 4 (Short Talks) theo y√™u c·∫ßu. H√£y sinh ra 1 c√¢u h·ªèi luy·ªán t·∫≠p TOEIC ph√π h·ª£p v·ªõi y√™u c·∫ßu sau c·ªßa ng∆∞·ªùi d√πng.

== H∆Ø·ªöNG D·∫™N PH√ÇN T√çCH LEVEL ==
T·ª± ƒë·ªông nh·∫≠n di·ªán m·ª©c ƒë·ªô kh√≥ t·ª´ y√™u c·∫ßu ng∆∞·ªùi d√πng:
- Level 1/Beginner: T·ª´ kh√≥a "d·ªÖ", "c∆° b·∫£n", "ƒë∆°n gi·∫£n", "level 1", "beginner"
- Level 2/Intermediate: T·ª´ kh√≥a "trung b√¨nh", "v·ª´a ph·∫£i", "level 2", "intermediate" ho·∫∑c kh√¥ng c√≥ t·ª´ kh√≥a level
- Level 3/Advanced: T·ª´ kh√≥a "kh√≥", "n√¢ng cao", "ph·ª©c t·∫°p", "level 3", "advanced"

== Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG ==
${userRequest}

== ƒê·∫¶U RA PH·∫¢I L√Ä OBJECT JSON DUY NH·∫§T, KH√îNG GI·∫¢I TH√çCH, KH√îNG MARKDOWN ==

Schema:
{
  "practiceQuestion": {
    "questionNumber": 1,
    "level": "beginner|intermediate|advanced",
    "transcript": "...", // N·ªôi dung b√†i n√≥i ng·∫Øn (30-60 gi√¢y)
    "question": "...", // C√¢u h·ªèi v·ªÅ b√†i n√≥i
    "choices": { "A": "...", "B": "...", "C": "..." },
    "choicesVi": { "A": "...", "B": "...", "C": "..." },
    "correctAnswer": "A" | "B" | "C",
    "explanation": "...", // Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát
    "traps": "...", // M√¥ t·∫£ b·∫´y b·∫±ng ti·∫øng Vi·ªát
    "type": "main idea|detail|inference|purpose|attitude", // Lo·∫°i c√¢u h·ªèi
    "answerType": "..." // M√¥ t·∫£ lo·∫°i ƒë√°p √°n
  }
}

== QUY T·∫ÆC T·∫†O C√ÇU H·ªéI THEO LEVEL ==
- Beginner: T·ª´ v·ª±ng c∆° b·∫£n, c·∫•u tr√∫c ƒë∆°n gi·∫£n, b·∫´y d·ªÖ nh·∫≠n bi·∫øt
- Intermediate: T·ª´ v·ª±ng ph·ªï th√¥ng, c·∫•u tr√∫c v·ª´a ph·∫£i, b·∫´y th√¥ng minh  
- Advanced: T·ª´ v·ª±ng n√¢ng cao, c·∫•u tr√∫c ph·ª©c t·∫°p, b·∫´y tinh vi
- Transcript ph·∫£i l√† ti·∫øng Anh, kh√¥ng d√πng ti·∫øng Vi·ªát
- Kh√¥ng ƒë∆∞·ª£c ra nh·ªØng c√¢u ƒë√£ ra tr∆∞·ªõc ƒë√≥

== LO·∫†I C√ÇU H·ªéI PART 4 ==
- Main idea: √ù ch√≠nh c·ªßa b√†i n√≥i
- Detail: Chi ti·∫øt c·ª• th·ªÉ trong b√†i
- Inference: Suy lu·∫≠n t·ª´ th√¥ng tin trong b√†i
- Purpose: M·ª•c ƒë√≠ch c·ªßa b√†i n√≥i
- Attitude: Th√°i ƒë·ªô c·ªßa ng∆∞·ªùi n√≥i
- Time/Date: Th·ªùi gian, ng√†y th√°ng
- Location: ƒê·ªãa ƒëi·ªÉm
- Number: S·ªë li·ªáu, s·ªë l∆∞·ª£ng`
    }
  ];

  const response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages,
      temperature: 1.0,
      max_tokens: 1024,
      top_p: 1.0
    })
  });

  if (!response.ok) throw new Error("OpenAI API error: " + response.statusText);
  const data = await response.json();
  
  // Tr·∫£ v·ªÅ object JSON duy nh·∫•t
  try {
    return JSON.parse(data.choices[0].message.content);
  } catch (e) {
    throw new Error("L·ªói parse JSON t·ª´ AI: " + data.choices[0].message.content);
  }
} 