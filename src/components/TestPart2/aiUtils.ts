// H√†m g·ªçi OpenAI API cho Part 2
export async function analyzeWithAI(logText: string): Promise<any> {
  const apiKey = process.env.REACT_APP_API_KEY_OPENAI;
  const endpoint = "https://api.openai.com/v1/chat/completions";

  const messages = [
    {
      role: "system",
      content: "B·∫°n l√† m·ªôt gi√°o vi√™n TOEIC Part 2 th√¥ng minh, chuy√™n ph√¢n t√≠ch l·ªói h·ªçc vi√™n v√† ƒë∆∞a ra b√†i luy·ªán t·∫≠p ch√≠nh x√°c theo t·ª´ng l·ªói."
    },
    {
      role: "user",
      content: `ƒê√¢y l√† c√¢u m√† h·ªçc vi√™n ${logText}

                        == Y√äU C·∫¶U X·ª¨ L√ù ==
                        B·∫°n th·ª±c hi·ªán 2 vi·ªác:

                        1. Ph√¢n t√≠ch l·ªói h·ªçc vi√™n, tr·∫£ v·ªÅ c√°c m·ª•c sau b·∫±ng ti·∫øng vi·ªát:
                        - mainError: l·ªói ch√≠nh ng∆∞·ªùi h·ªçc m·∫Øc ph·∫£i (ng·∫Øn g·ªçn)
                        - reasons: m·∫£ng g·ªìm 2‚Äì3 nguy√™n nh√¢n c·ª• th·ªÉ
                        - solutions: m·∫£ng g·ªìm 2‚Äì3 gi·∫£i ph√°p r√µ r√†ng, ƒë∆°n gi·∫£n ƒë·ªÉ c·∫£i thi·ªán

                        2. Sinh m·ªôt c√¢u luy·ªán t·∫≠p m·ªõi t∆∞∆°ng t·ª± (gi·ªëng c·∫•u tr√∫c ƒë·ªÅ TOEIC Part 2) v·ªõi level t∆∞∆°ng t·ª±, g·ªìm:
                        - question: c√¢u h·ªèi b·∫±ng ti·∫øng Anh
                        - choices: A/B/C l√† c√°c c√¢u tr·∫£ l·ªùi (ch·ªâ 1 c√¢u ƒë√∫ng)
                        - correctAnswer: "A" / "B" / "C"
                        - explanation: gi·∫£i th√≠ch v√¨ sao ƒë√°p √°n ƒë√∫ng
                        - tips: m·∫πo l√†m b√†i t∆∞∆°ng t·ª±
                        - type: lo·∫°i c√¢u h·ªèi (WH-question, Yes/No, Statement-Response, Choice)
                        - answerType: lo·∫°i ƒë√°p √°n (location, time, person, reason, yes_no, agreement, solution, choice)

                        == Y√äU C·∫¶U ƒê·∫¶U RA ==
                        Tr·∫£ v·ªÅ duy nh·∫•t 1 object JSON v·ªõi schema sau:

                        {
                        "questionNumber": 6,
                        "analysis": {
                            "correctAnswer": "...",
                            "chosenAnswer": "...",
                            "mainError": "...",
                            "reasons": ["...", "..."],
                            "solutions": ["...", "..."]
                        },
                        "practiceQuestion": {
                            "question": "...",
                            "choices": {
                            "A": "...",
                            "B": "...",
                            "C": "..."
                            },
                            "choicesVi": {
                            "A": "...",
                            "B": "...",
                            "C": "..."
                            },
                            "correctAnswer": "A" | "B" | "C",
                            "explanation": "...",
                            "tips": "...",
                            "type": "WH-question" | "Yes/No" | "Statement-Response" | "Choice",
                            "answerType": "location" | "time" | "person" | "reason" | "yes_no" | "agreement" | "solution" | "choice"
                        }
                        }

                        == LO·∫†I C√ÇU H·ªéI PART 2 ==
                        type                | M√¥ t·∫£  
                        --------------------|--------------------------------------  
                        WH-question         | What, Where, When, Who, Why, How  
                        Yes/No              | C√¢u h·ªèi Yes/No  
                        Statement-Response  | C√¢u ph√°t bi·ªÉu + ph·∫£n h·ªìi  
                        Choice              | C√¢u h·ªèi l·ª±a ch·ªçn  

                        == LO·∫†I ƒê√ÅP √ÅN ==
                        answerType          | M√¥ t·∫£  
                        --------------------|--------------------------------------  
                        location            | ƒê·ªãa ƒëi·ªÉm, n∆°i ch·ªën  
                        time                | Th·ªùi gian, th·ªùi ƒëi·ªÉm  
                        person              | Ng∆∞·ªùi, ch·ªß th·ªÉ  
                        reason              | L√Ω do, nguy√™n nh√¢n  
                        yes_no              | X√°c nh·∫≠n/ph·ªß ƒë·ªãnh  
                        agreement           | ƒê·ªìng √Ω/h·ªó tr·ª£  
                        solution            | Gi·∫£i ph√°p/h√†nh ƒë·ªông  
                        choice              | L·ª±a ch·ªçn c·ª• th·ªÉ  

                        == QUY T·∫ÆC B·∫ÆT BU·ªòC ==
                        - C√¢u h·ªèi ph·∫£i t·ª± nhi√™n, ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh c√¥ng vi·ªác/ƒë·ªùi s·ªëng h√†ng ng√†y
                        - ƒê√°p √°n ƒë√∫ng ph·∫£i tr·∫£ l·ªùi tr·ª±c ti·∫øp ho·∫∑c gi√°n ti·∫øp c√¢u h·ªèi
                        - ƒê√°p √°n sai ph·∫£i c√≥ v·∫ª h·ª£p l√Ω nh∆∞ng kh√¥ng ƒë√∫ng v·ªõi c√¢u h·ªèi
                        - Tr√°nh ƒë√°p √°n qu√° hi·ªÉn nhi√™n sai ho·∫∑c kh√¥ng li√™n quan
                        - C√¢u h·ªèi v√† ƒë√°p √°n ph·∫£i c√≥ ƒë·ªô kh√≥ t∆∞∆°ng ƒë∆∞∆°ng v·ªõi TOEIC Part 2
                        - S·ª≠ d·ª•ng t·ª´ v·ª±ng v√† ng·ªØ ph√°p ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô TOEIC

                        == EXAMPLE ==
                        {
                            "questionNumber": 1,
                            "analysis": {
                                "correctAnswer": "B. Because the conference room was double-booked.",
                                "chosenAnswer": "A. There wasn't a projector available in the room.",
                                "mainError": "Kh√¥ng hi·ªÉu ƒë√∫ng lo·∫°i c√¢u h·ªèi Why",
                                "reasons": [
                                    "T·∫≠p trung v√†o chi ti·∫øt ph·ª• thay v√¨ l√Ω do ch√≠nh",
                                    "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c t·ª´ kh√≥a 'because' ch·ªâ l√Ω do"
                                ],
                                "solutions": [
                                    "L·∫Øng nghe t·ª´ kh√≥a ch·ªâ l√Ω do nh∆∞ 'because', 'due to', 'since'",
                                    "T·∫≠p trung v√†o c√¢u tr·∫£ l·ªùi c√≥ c·∫•u tr√∫c gi·∫£i th√≠ch"
                                ]
                            },
                            "practiceQuestion": {
                                "question": "Why did the meeting get postponed?",
                                "choices": {
                                    "A": "The meeting room is on the third floor.",
                                    "B": "Because the presenter was stuck in traffic.",
                                    "C": "Yes, it was rescheduled for tomorrow."
                                },
                                "choicesVi": {
                                    "A": "Ph√≤ng h·ªçp ·ªü t·∫ßng 3.",
                                    "B": "V√¨ ng∆∞·ªùi di·ªÖn thuy·∫øt b·ªã t·∫Øc ƒë∆∞·ªùng.",
                                    "C": "V√¢ng, n√≥ ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i cho ng√†y mai."
                                },
                                "correctAnswer": "B",
                                "explanation": "C√¢u h·ªèi 'Why' c·∫ßn l√Ω do, ch·ªâ c√≥ B ƒë∆∞a ra l√Ω do c·ª• th·ªÉ v·ªõi 'because'.",
                                "tips": "T·∫≠p trung v√†o c√°c c√¢u ch·ª©a 'because', 'due to'.",
                                "type": "WH-question",
                                "answerType": "reason"
                            }
                        }

                        == QUY TR√åNH KI·ªÇM TRA NHANH ==
                        - X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi (WH/Yes-No/Statement/Choice)
                        - ƒê·ªëi chi·∫øu ƒë√°p √°n: ƒë√°p √°n ƒë√∫ng ph·∫£i ph√π h·ª£p v·ªõi lo·∫°i c√¢u h·ªèi
                        - Ki·ªÉm tra:
                        + C√¢u h·ªèi t·ª± nhi√™n, kh√¥ng qu√° d√†i
                        + ƒê√°p √°n c√≥ ƒë·ªô kh√≥ ph√π h·ª£p
                        + Gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu
                        + M·∫πo l√†m b√†i h·ªØu √≠ch
                        - ƒê·∫£m b·∫£o output l√† JSON h·ª£p l·ªá
                        - ƒê√°p √°n ƒë√∫ng ph·∫£i random ng·∫´u nhi√™n v·ªÅ A ho·∫∑c B ho·∫∑c C
                        - üëâ CH·ªà TR·∫¢ V·ªÄ JSON, KH√îNG GI·∫¢I TH√çCH, KH√îNG MARKDOWN.
                        `
    }
  ];

  const response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages,
      temperature: 1.0,
      max_tokens: 2048,
      top_p: 1.0
    })
  });

  if (!response.ok) {
    if (response.status === 401) {
      throw new Error("OpenAI API key is invalid or expired. Please check your REACT_APP_OPENAI_API_KEY environment variable.");
    }
    throw new Error("OpenAI API error: " + response.statusText);
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

// H√†m t·∫°o audio base64 t·ª´ Google TTS cho Part 2
export async function generateAudioBase64(practiceQuestion: any): Promise<string> {
  const GOOGLE_TTS_KEY = process.env.REACT_APP_GOOGLE_TTS_KEY || 'AIzaSyAqO6_hgidkr_qandEMZUJlBcAhF3xOsUk';
  
  function fixPronunciation(text: string) {
    let fixedText = text;
    // Th√™m c√°c t·ª´ ph·ªï bi·∫øn trong Part 2
    fixedText = fixedText.replace(/\bmeeting\b/gi, '<phoneme alphabet="ipa" ph="ÀàmiÀêt…™≈ã">meeting</phoneme>');
    fixedText = fixedText.replace(/\bconference\b/gi, '<phoneme alphabet="ipa" ph="Ààk…ëÀênf…ôr…ôns">conference</phoneme>');
    fixedText = fixedText.replace(/\boffice\b/gi, '<phoneme alphabet="ipa" ph="Àà…îÀêf…™s">office</phoneme>');
    fixedText = fixedText.replace(/\bproject\b/gi, '<phoneme alphabet="ipa" ph="Ààpr…ëÀêd íekt">project</phoneme>');
    fixedText = fixedText.replace(/\bclient\b/gi, '<phoneme alphabet="ipa" ph="Ààkla…™…ônt">client</phoneme>');
    fixedText = fixedText.replace(/\bmanager\b/gi, '<phoneme alphabet="ipa" ph="Ààm√¶n…™d í…ôr">manager</phoneme>');
    fixedText = fixedText.replace(/\bdeadline\b/gi, '<phoneme alphabet="ipa" ph="Ààdedla…™n">deadline</phoneme>');
    fixedText = fixedText.replace(/\bschedule\b/gi, '<phoneme alphabet="ipa" ph="Ààsked íuÀêl">schedule</phoneme>');
    return fixedText;
  }

  // Gi·ªçng ƒë·ªçc chu·∫©n TOEIC - gi·ªëng Part 1
  // Nam: gi·ªçng M·ªπ trung t√≠nh, r√µ r√†ng
  const maleVoice = 'en-US-Standard-B';  // Gi·ªçng nam M·ªπ chu·∫©n
  // N·ªØ: gi·ªçng M·ªπ trung t√≠nh, r√µ r√†ng  
  const femaleVoice = 'en-US-Standard-C'; // Gi·ªçng n·ªØ M·ªπ chu·∫©n

  // Alternate voices cho ƒëa d·∫°ng nh∆∞ TOEIC th·∫≠t
  const alternateVoices = {
    male: ['en-US-Standard-B', 'en-US-Standard-D'],
    female: ['en-US-Standard-C', 'en-US-Standard-E']
  };

  // Ch·ªçn gi·ªçng ƒë·ªçc v·ªõi m·ªôt ch√∫t ƒëa d·∫°ng
  const questionNumber = practiceQuestion.questionNumber || 1;
  const questionVoice = Math.random() > 0.5 ? 
    alternateVoices.female[questionNumber % 2] : alternateVoices.male[questionNumber % 2];
  const responseVoice = questionVoice === alternateVoices.female[questionNumber % 2] ? 
    alternateVoices.male[(questionNumber + 1) % 2] : alternateVoices.female[(questionNumber + 1) % 2];

  // N·ªôi dung vƒÉn b·∫£n
  const questionText = practiceQuestion.question || '';
  const responseA = practiceQuestion.choices?.A || '';
  const responseB = practiceQuestion.choices?.B || '';
  const responseC = practiceQuestion.choices?.C || '';

  // SSML v·ªõi thi·∫øt l·∫≠p gi·ªëng TOEIC th·∫≠t
  const ssmlContent = `
    <speak>
      <voice name="${maleVoice}">
        <prosody rate="0.9" pitch="0st">
          Number ${questionNumber}.
          <break time="1.0s"/>
        </prosody>
      </voice>
      
      <voice name="${questionVoice}">
        <prosody rate="0.85" pitch="0st">
          ${fixPronunciation(questionText)}
        </prosody>
      </voice>

      <break time="1.5s"/>

      <voice name="${responseVoice}">
        <prosody rate="0.9" pitch="0st">
          <emphasis level="moderate">A.</emphasis>
          <break time="0.3s"/>
          ${fixPronunciation(responseA)}
        </prosody>
      </voice>

      <break time="1.0s"/>

      <voice name="${responseVoice}">
        <prosody rate="0.9" pitch="0st">
          <emphasis level="moderate">B.</emphasis>
          <break time="0.3s"/>
          ${fixPronunciation(responseB)}
        </prosody>
      </voice>

      <break time="1.0s"/>

      <voice name="${responseVoice}">
        <prosody rate="0.9" pitch="0st">
          <emphasis level="moderate">C.</emphasis>
          <break time="0.3s"/>
          ${fixPronunciation(responseC)}
        </prosody>
      </voice>
    </speak>
  `;

  // G·ª≠i y√™u c·∫ßu Google TTS v·ªõi config gi·ªëng TOEIC
  const response = await fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${GOOGLE_TTS_KEY}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      input: { ssml: ssmlContent },
      voice: {
        languageCode: 'en-US'
      },
      audioConfig: {
        audioEncoding: 'MP3',
        speakingRate: 0.9,  // T·ªëc ƒë·ªô chu·∫©n TOEIC
        pitch: 0.0,         // Pitch trung t√≠nh
        volumeGainDb: 0.0,  // Volume chu·∫©n
        effectsProfileId: ['headphone-class-device'] // T·ªëi ∆∞u cho headphone
      }
    })
  });

  const result = await response.json();
  if (result.audioContent) {
    return `data:audio/mp3;base64,${result.audioContent}`;
  }
  throw new Error('Audio generation failed');
} 