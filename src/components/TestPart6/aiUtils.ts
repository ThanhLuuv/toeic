// H√†m g·ªçi OpenAI API cho Part 6 (Text Completion)
export async function analyzeWithAI(logText: string): Promise<any> {
  const apiKey = process.env.REACT_APP_API_KEY_OPENAI;
  const endpoint = "https://api.openai.com/v1/chat/completions";

  const messages = [
    {
      role: "system",
      content: "B·∫°n l√† m·ªôt gi√°o vi√™n TOEIC Part 6 th√¥ng minh c·ªßa ETS, chuy√™n ph√¢n t√≠ch l·ªói h·ªçc vi√™n v√† ƒë∆∞a ra b√†i luy·ªán t·∫≠p ch√≠nh x√°c theo t·ª´ng l·ªói."
    },
    {
      role: "user",
      content: `ƒê√¢y l√† c√¢u m√† h·ªçc vi√™n ${logText}

                        == Y√äU C·∫¶U X·ª¨ L√ù ==
                        B·∫°n th·ª±c hi·ªán 2 vi·ªác:

                        1. Ph√¢n t√≠ch l·ªói h·ªçc vi√™n, tr·∫£ v·ªÅ c√°c m·ª•c sau b·∫±ng ti·∫øng vi·ªát:
                        - mainError: l·ªói ch√≠nh ng∆∞·ªùi h·ªçc m·∫Øc ph·∫£i (ng·∫Øn g·ªçn)
                        - reasons: m·∫£ng g·ªìm 2‚Äì3 nguy√™n nh√¢n c·ª• th·ªÉ
                        - solutions: m·∫£ng g·ªìm 2‚Äì3 gi·∫£i ph√°p r√µ r√†ng, ƒë∆°n gi·∫£n ƒë·ªÉ c·∫£i thi·ªán

                        2. Sinh m·ªôt c√¢u luy·ªán t·∫≠p m·ªõi t∆∞∆°ng t·ª± (gi·ªëng c·∫•u tr√∫c ƒë·ªÅ TOEIC Part 6) v·ªõi level t∆∞∆°ng t·ª±, g·ªìm:
                        - passage: ƒëo·∫°n vƒÉn v·ªõi 4 ch·ªó tr·ªëng (_____) - B·∫ÆT BU·ªòC PH·∫¢I C√ì ƒê√öNG 4 CH·ªñ TR·ªêNG
                        - questions: m·∫£ng g·ªìm ƒê√öNG 4 c√¢u h·ªèi t∆∞∆°ng ·ª©ng v·ªõi 4 ch·ªó tr·ªëng
                        - choices: A/B/C/D l√† c√°c ƒë√°p √°n cho t·ª´ng c√¢u h·ªèi
                        - choicesVi: b·∫£n d·ªãch ti·∫øng Vi·ªát cho m·ªói ƒë√°p √°n
                        - correctAnswers: m·∫£ng ƒë√°p √°n ƒë√∫ng cho t·ª´ng c√¢u h·ªèi
                        - explanations: m·∫£ng gi·∫£i th√≠ch cho t·ª´ng c√¢u h·ªèi
                        - traps: m√¥ t·∫£ c√°c b·∫´y ƒë∆∞·ª£c g√†i
                        - type: lo·∫°i c√¢u h·ªèi (grammar, vocabulary, context, etc.)

                        == Y√äU C·∫¶U ƒê·∫¶U RA ==
                        Tr·∫£ v·ªÅ duy nh·∫•t 1 object JSON v·ªõi schema sau:

                        {
                        "questionNumber": 1,
                        "analysis": {
                            "correctAnswer": "...",
                            "chosenAnswer": "...",
                            "mainError": "...",
                            "reasons": ["...", "..."],
                            "solutions": ["...", "..."]
                        },
                        "practiceQuestion": {
                            "passage": "...",
                            "questions": [
                                {
                                    "question": "...",
                                    "choices": {
                                        "A": "...",
                                        "B": "...",
                                        "C": "...",
                                        "D": "..."
                                    },
                                    "choicesVi": {
                                        "A": "...",
                                        "B": "...",
                                        "C": "...",
                                        "D": "..."
                                    },
                                    "correctAnswer": "A" | "B" | "C" | "D",
                                    "explanation": "...",
                                    "type": "..."
                                }
                            ],
                            "traps": "...",
                            "type": "..."
                        }
                        }

                        == DANH M·ª§C B·∫™Y ==
                        trapId            | T√™n               | M√¥ t·∫£  
                        ------------------|-------------------|--------------------------------------  
                        contextError      | Context Error     | Sai ng·ªØ c·∫£nh  
                        grammarError      | Grammar Error     | L·ªói ng·ªØ ph√°p  
                        vocabularyError   | Vocabulary Error  | Sai t·ª´ v·ª±ng  
                        collocationError  | Collocation Error | Sai c·ª•m t·ª´  
                        tenseError        | Tense Error       | Sai th√¨  
                        prepositionError  | Preposition Error | Sai gi·ªõi t·ª´  
                        articleError      | Article Error     | Sai m·∫°o t·ª´  
                        similarWord       | Similar Word      | T·ª´ t∆∞∆°ng t·ª± nh∆∞ng sai nghƒ©a  

                        == QUY T·∫ÆC B·∫ÆT BU·ªòC ==
                        - ƒêo·∫°n vƒÉn PH·∫¢I C√ì ƒê√öNG 4 CH·ªñ TR·ªêNG (_____) - KH√îNG ƒê∆Ø·ª¢C THI·∫æU HO·∫∂C TH·ª™A
                        - S·ªë l∆∞·ª£ng c√¢u h·ªèi PH·∫¢I B·∫∞NG ƒê√öNG s·ªë ch·ªó tr·ªëng (4 c√¢u h·ªèi cho 4 ch·ªó tr·ªëng)
                        - ƒê√°p √°n ƒë√∫ng ph·∫£i ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh v√† ng·ªØ ph√°p
                        - ƒê√°p √°n sai l√† ƒë√°p √°n c√≥ c√°c l·ªói sai nh∆∞:
                        + Sai ng·ªØ c·∫£nh
                        + Sai ng·ªØ ph√°p
                        + Sai t·ª´ v·ª±ng
                        + Sai c·ª•m t·ª´
                        - ƒêo·∫°n vƒÉn ph·∫£i c√≥ logic, m·∫°ch l·∫°c
                        - üëâ CH·ªà TR·∫¢ V·ªÄ JSON, KH√îNG GI·∫¢I TH√çCH, KH√îNG MARKDOWN.
                        `
    }
  ];

  const response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages,
      temperature: 1.0,
      max_tokens: 2048,
      top_p: 1.0
    })
  });

  if (!response.ok) {
    if (response.status === 401) {
      throw new Error("OpenAI API key is invalid or expired. Please check your REACT_APP_OPENAI_API_KEY environment variable.");
    }
    throw new Error("OpenAI API error: " + response.statusText);
  }

  const data = await response.json();
  const content = data.choices[0].message.content;
  
  // Validate the generated content if it's JSON
  try {
    const result = JSON.parse(content);
    if (result.practiceQuestion) {
      const passage = result.practiceQuestion.passage;
      const questions = result.practiceQuestion.questions;
      
      // Count blanks in passage
      const blankCount = (passage.match(/_____/g) || []).length;
      
      // Validate number of questions matches number of blanks
      if (blankCount !== 4) {
        console.warn(`Warning: S·ªë ch·ªó tr·ªëng kh√¥ng ƒë√∫ng: ${blankCount} (c·∫ßn 4 ch·ªó tr·ªëng)`);
      }
      
      if (!questions || questions.length !== 4) {
        console.warn(`Warning: S·ªë c√¢u h·ªèi kh√¥ng ƒë√∫ng: ${questions?.length || 0} (c·∫ßn 4 c√¢u h·ªèi)`);
      }
    }
  } catch (e) {
    // If not JSON, return as is
  }
  
  return content;
}

// H√†m sinh 1 c√¢u luy·ªán t·∫≠p TOEIC Part 6 theo y√™u c·∫ßu ng∆∞·ªùi d√πng
export async function generateToeicPracticeQuestionPart6(userRequest: string): Promise<any> {
  const apiKey = process.env.REACT_APP_API_KEY_OPENAI;
  const endpoint = "https://api.openai.com/v1/chat/completions";
  
  const messages = [
    {
      role: "system",
      content: `B·∫°n l√† ng∆∞·ªùi ra ƒë·ªÅ TOEIC c·ªßa ETS, chuy√™n t·∫°o b√†i luy·ªán t·∫≠p TOEIC Part 6 (Text Completion) theo y√™u c·∫ßu.

== C·∫§U TR√öC TOEIC PART 6 ==
- 16 c√¢u h·ªèi (4 ƒëo·∫°n vƒÉn, m·ªói ƒëo·∫°n 4 c√¢u h·ªèi)
- M·ªói ƒëo·∫°n vƒÉn c√≥ ƒê√öNG 4 ch·ªó tr·ªëng c·∫ßn ƒëi·ªÅn t·ª´ (_____)
- S·ªë l∆∞·ª£ng c√¢u h·ªèi PH·∫¢I B·∫∞NG ƒê√öNG s·ªë ch·ªó tr·ªëng (4 c√¢u h·ªèi cho 4 ch·ªó tr·ªëng)
- 4 l·ª±a ch·ªçn A, B, C, D cho m·ªói ch·ªó tr·ªëng
- T·∫≠p trung v√†o: ng·ªØ ph√°p, t·ª´ v·ª±ng, ng·ªØ c·∫£nh, c·ª•m t·ª´
- Lo·∫°i vƒÉn b·∫£n: email, th∆∞, memo, th√¥ng b√°o, qu·∫£ng c√°o, b√†i b√°o

== H∆Ø·ªöNG D·∫™N PH√ÇN T√çCH LEVEL ==
T·ª± ƒë·ªông nh·∫≠n di·ªán m·ª©c ƒë·ªô kh√≥ t·ª´ y√™u c·∫ßu ng∆∞·ªùi d√πng:
- Level 1/Beginner: T·ª´ kh√≥a "d·ªÖ", "c∆° b·∫£n", "ƒë∆°n gi·∫£n", "level 1", "beginner"
- Level 2/Intermediate: T·ª´ kh√≥a "trung b√¨nh", "v·ª´a ph·∫£i", "level 2", "intermediate" ho·∫∑c kh√¥ng c√≥ t·ª´ kh√≥a level
- Level 3/Advanced: T·ª´ kh√≥a "kh√≥", "n√¢ng cao", "ph·ª©c t·∫°p", "level 3", "advanced"

== Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG ==
${userRequest}

== ƒê·∫¶U RA PH·∫¢I L√Ä OBJECT JSON DUY NH·∫§T, KH√îNG GI·∫¢I TH√çCH, KH√îNG MARKDOWN ==

Schema m·∫´u:
{
  "practiceQuestion": {
    "questionNumber": 1,
    "level": "intermediate",
    "passage": "To: Kitchen staff, office employees\nFrom: Manager, Larry Park\nDate: March 23\nSubject: Renovations\n\nTo all kitchen staff and Harmon employees,\n\nFrom Sunday, March 23 to Thursday, March 27, the employee cafeteria kitchens will undergo renovations as new appliances and equipment _____(143) to replace the old ones. _____(144). Instead, the convenience shops will carry more sandwiches, prepared lunch boxes, and snacks for the employees during this time. The renovations will increase the number of sinks, ovens, and stove tops so that a larger volume of meals can be provided _____(145) the lunch and dinner rushes. We apologize for the inconvenience but we hope that the changes will _____(146) the services in the cafeteria.",
    "questions": [
      {
        "choices": {
          "A": "are bringing in",
          "B": "have brought in",
          "C": "bring in",
          "D": "are brought in"
        },
        "choicesVi": {
          "A": "ƒëang mang v√†o",
          "B": "ƒë√£ mang v√†o",
          "C": "mang v√†o",
          "D": "ƒë∆∞·ª£c mang v√†o"
        },
        "correctAnswer": "D",
        "explanation": "C√¢u b·ªã ƒë·ªông l√† c·∫•u tr√∫c ph√π h·ª£p nh·∫•t trong ng·ªØ c·∫£nh n√†y ('are brought in' ‚Äì ƒë∆∞·ª£c mang v√†o), v√¨ kh√¥ng n√≥i r√µ ai l√† ng∆∞·ªùi th·ª±c hi·ªán h√†nh ƒë·ªông.",
        "type": "grammar"
      },
      {
        "choices": {
          "A": "This will take a lot of work.",
          "B": "As a result, the convenience shops will be closed.",
          "C": "Because of this, hot meals will not be available for the patrons.",
          "D": "There will be noise and chaos as a result."
        },
        "choicesVi": {
          "A": "Vi·ªác n√†y s·∫Ω t·ªën nhi·ªÅu c√¥ng s·ª©c.",
          "B": "Do ƒë√≥, c√°c c·ª≠a h√†ng ti·ªán l·ª£i s·∫Ω b·ªã ƒë√≥ng c·ª≠a.",
          "C": "V√¨ l√Ω do ƒë√≥, s·∫Ω kh√¥ng c√≥ m√≥n n√≥ng cho kh√°ch.",
          "D": "S·∫Ω c√≥ ti·∫øng ·ªìn v√† s·ª± h·ªón lo·∫°n x·∫£y ra."
        },
        "correctAnswer": "C",
        "explanation": "D√≤ng sau cho bi·∫øt: 'Instead, the convenience shops will carry more sandwiches...', nghƒ©a l√† b√¨nh th∆∞·ªùng c√≥ m√≥n n√≥ng, nh∆∞ng do c·∫£i t·∫°o n√™n kh√¥ng c√≥ m√≥n n√≥ng. V√¨ v·∫≠y, C l√† l·ª±a ch·ªçn h·ª£p l√Ω nh·∫•t.",
        "type": "context"
      },
      {
        "choices": {
          "A": "before",
          "B": "after",
          "C": "during",
          "D": "within"
        },
        "choicesVi": {
          "A": "tr∆∞·ªõc",
          "B": "sau",
          "C": "trong l√∫c",
          "D": "trong v√≤ng"
        },
        "correctAnswer": "C",
        "explanation": "'during the lunch and dinner rushes' ‚Äì l√† th·ªùi ƒëi·ªÉm c·∫ßn ph·ª•c v·ª• nhi·ªÅu, n√™n c·∫ßn tƒÉng thi·∫øt b·ªã ƒë·ªÉ ph·ª•c v·ª• **trong l√∫c** cao ƒëi·ªÉm.",
        "type": "preposition"
      },
      {
        "choices": {
          "A": "develop",
          "B": "improve",
          "C": "rectify",
          "D": "recover"
        },
        "choicesVi": {
          "A": "ph√°t tri·ªÉn",
          "B": "c·∫£i thi·ªán",
          "C": "s·ª≠a ch·ªØa",
          "D": "ph·ª•c h·ªìi"
        },
        "correctAnswer": "B",
        "explanation": "'improve' l√† t·ª´ ph√π h·ª£p nh·∫•t v·ªÅ nghƒ©a ‚Äì c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng d·ªãch v·ª• trong nh√† ƒÉn. C√°c t·ª´ kh√°c kh√¥ng ƒë√∫ng v·ªÅ ng·ªØ c·∫£nh.",
        "type": "vocabulary"
      }
    ],
    "traps": "C√¢u 143 ƒë√°nh l·ª´a ng∆∞·ªùi h·ªçc ·ªü c·∫•u tr√∫c b·ªã ƒë·ªông, c√¢u 144 ki·ªÉm tra kh·∫£ nƒÉng hi·ªÉu ng·ªØ c·∫£nh, c√¢u 145 v·ªÅ gi·ªõi t·ª´, c√¢u 146 v·ªÅ t·ª´ v·ª±ng t∆∞∆°ng ƒë·ªìng.",
    "type": "memo"
  }
}
== QUY T·∫ÆC T·∫†O B√ÄI T·∫¨P THEO LEVEL ==
- Beginner: Ng·ªØ ph√°p c∆° b·∫£n, t·ª´ v·ª±ng ƒë∆°n gi·∫£n, b·∫´y d·ªÖ nh·∫≠n bi·∫øt
- Intermediate: Ng·ªØ ph√°p v·ª´a ph·∫£i, t·ª´ v·ª±ng ph·ªï th√¥ng, b·∫´y th√¥ng minh  
- Advanced: Ng·ªØ ph√°p ph·ª©c t·∫°p, t·ª´ v·ª±ng n√¢ng cao, b·∫´y tinh vi
- ƒêo·∫°n vƒÉn ph·∫£i l√† ti·∫øng Anh, kh√¥ng d√πng ti·∫øng Vi·ªát
- Ch·ªó tr·ªëng ƒë∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng "_____"
- B·∫ÆT BU·ªòC: ƒêo·∫°n vƒÉn ph·∫£i c√≥ ƒê√öNG 4 ch·ªó tr·ªëng v√† ƒê√öNG 4 c√¢u h·ªèi t∆∞∆°ng ·ª©ng
- Kh√¥ng ƒë∆∞·ª£c ra nh·ªØng b√†i ƒë√£ ra tr∆∞·ªõc ƒë√≥

== LO·∫†I C√ÇU H·ªéI PART 6 ==
- Grammar: Ng·ªØ ph√°p (th√¨, c·∫•u tr√∫c c√¢u, v.v.)
- Vocabulary: T·ª´ v·ª±ng (nghƒ©a t·ª´, t·ª´ ƒë·ªìng nghƒ©a, v.v.)
- Context: Ng·ªØ c·∫£nh (ph√π h·ª£p v·ªõi n·ªôi dung)
- Collocation: C·ª•m t·ª´ (t·ª´ ƒëi k√®m)
- Tense: Th√¨ c·ªßa ƒë·ªông t·ª´
- Preposition: Gi·ªõi t·ª´
- Article: M·∫°o t·ª´ (a, an, the)
- Conjunction: Li√™n t·ª´
- Pronoun: ƒê·∫°i t·ª´

== LO·∫†I VƒÇN B·∫¢N PART 6 ==
- Email: Th∆∞ ƒëi·ªán t·ª≠
- Letter: Th∆∞ tay
- Memo: Ghi nh·ªõ
- Notice: Th√¥ng b√°o
- Advertisement: Qu·∫£ng c√°o
- Article: B√†i b√°o
- Report: B√°o c√°o`
    }
  ];

  const response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages,
      temperature: 1.0,
      max_tokens: 1024,
      top_p: 1.0
    })
  });

  if (!response.ok) throw new Error("OpenAI API error: " + response.statusText);
  const data = await response.json();
  
  // Tr·∫£ v·ªÅ object JSON duy nh·∫•t
  try {
    const result = JSON.parse(data.choices[0].message.content);
    
    // Validate the generated content
    if (result.practiceQuestion) {
      const passage = result.practiceQuestion.passage;
      const questions = result.practiceQuestion.questions;
      
      // Count blanks in passage
      const blankCount = (passage.match(/_____/g) || []).length;
      
      // Validate number of questions matches number of blanks
      if (blankCount !== 4) {
        throw new Error(`S·ªë ch·ªó tr·ªëng kh√¥ng ƒë√∫ng: ${blankCount} (c·∫ßn 4 ch·ªó tr·ªëng)`);
      }
      
      if (!questions || questions.length !== 4) {
        throw new Error(`S·ªë c√¢u h·ªèi kh√¥ng ƒë√∫ng: ${questions?.length || 0} (c·∫ßn 4 c√¢u h·ªèi)`);
      }
    }
    
    return result;
  } catch (e) {
    throw new Error("L·ªói parse JSON t·ª´ AI: " + data.choices[0].message.content);
  }
} 